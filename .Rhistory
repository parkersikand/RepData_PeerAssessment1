mat1
source('C:/Users/User/Desktop/quiz1.r')
source('C:/Users/User/Desktop/quiz1.r')
mat1
source('C:/Users/User/Desktop/quiz1.r')
source('C:/Users/User/Desktop/quiz1.r')
mat1
source('C:/Users/User/Desktop/quiz1.r')
mat1
source('C:/Users/User/Desktop/quiz1.r')
mat1
source('C:/Users/User/Desktop/quiz1.r')
source('C:/Users/User/Desktop/quiz1.r')
source('C:/Users/User/Desktop/quiz1.r')
bmat1
source('C:/Users/User/Desktop/quiz1.r')
source('C:/Users/User/Desktop/quiz1.r')
m
source('C:/Users/User/Desktop/quiz1.r')
m1
source('C:/Users/User/Desktop/quiz1.r')
sol1
source('C:/Users/User/Desktop/quiz1.r')
sl1
sol1
source('C:/Users/User/Desktop/quiz1.r')
source('C:/Users/User/Desktop/quiz1.r')
sol1
mat1
bmat
bmat1
source('C:/Users/User/Desktop/quiz1.r')
source('C:/Users/User/Desktop/quiz1.r')
sol1
sol1b
mat1b
m1b
sol1b[1]
sol1b[2]
sol1b[3]
sum(sol1b)
source('C:/Users/User/Desktop/quiz1.r')
normed
sum(normed)
source('C:/Users/User/Desktop/quiz1.r')
normed
source('C:/Users/User/Desktop/quiz1.r')
normed
source('C:/Users/User/Desktop/quiz1.r')
normed
m1
eigen(m1)
normed
source('C:/Users/User/Desktop/quiz1.r')
source('C:/Users/User/Desktop/quiz1.r')
source('C:/Users/User/Desktop/quiz1.r')
PageRank(m1, b1)
source('C:/Users/User/Desktop/quiz1.r')
nrow(m1)
PageRank(m1, b1)
b1
PageRank(mat1, b1)
bmat1
echo = TRUE
library(ggplot2)
packages.install("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
setwd(".")
setwd("~/GitHub/RepData_PeerAssessment1")
data <- read.csv(unzip("activity.zip","activity.csv"))
stepsPerDay <- aggregate(data$steps, by=list(data$date), FUN=sum)[2]
stepsPerDay <- stepsPerDay[!is.na(stepsPerDay)]
qplot(stepsPerDay, geom="histogram")
median(stepsPerDay)
data
labels(data)
labels(data)[2]
data
aggregate(data$steps, by=list(data$interval), FUN=avg)
aggregate(data$steps, by=list(data$interval), FUN=mean)
dataNoNA <- data[!is.na(data)]
dataNoNA <- data[!is.na(data)]
stepsPerDay <- aggregate(dataNoNA$steps, by=list(dataNoNA$date), FUN=sum)[2]
dataNoNA <- data[:, !is.na(data)]
data
data[1:3]
data[1:2]
data[1:3, 1:3]
data[, 1:3]
data[, 1:3]
data[1:3, ]
dataNoNA <- data[!is.na(data$steps), ]
stepsPerDay <- aggregate(dataNoNA$steps, by=list(dataNoNA$date), FUN=sum)[2]
qplot(stepsPerDay, geom="histogram")
stepsPerDay <- aggregate(dataNoNA$steps, by=list(dataNoNA$date), FUN=sum)[2]
qplot(stepsPerDay, geom="histogram")
meanTotalStepsPerDay <- mean(stepsPerDay)
medianTotalStepsPerDay <- median(stepsPerDay)
stepsPerDay
mean(stepsPerDay)
mean(stepsPerDay[1])
stepsPerDay
stepsPerDay$x
mean(stepsPerDay$x)
meanPerInterval <- aggregate(dataNoNA$steps, by=(dataNoNA$interval), FUN=mean)
meanPerInterval <- aggregate(dataNoNA$steps, by=list(dataNoNA$interval), FUN=mean)
meanPerInterval
ts(meanPerInterval)
plot.ts(meanPerInterval)
plot.ts(ts(meanPerInterval))
meanPerInterval[2:3]
meanPerInterval[1:2]
meanPerInterval[0:2]
meanPerInterval[1:2]
meanPerInterval[1:1]
meanPerInterval[1]
plot.ts(meanPerInterval[2], meanPerInterval[1])
plot.ts(meanPerInterval[2])
plot.ts(meanPerInterval[2], meanPerInterval[1])
data.frame(meanPerInterval)
data.frame(meanPerInterval)[1]
data.frame(meanPerInterval)[2]
version
is.NA(data)
is.na(data)
is.na(data[2])
size(data[2](is.na(data[2])))
dimen(data[2](is.na(data[2])))
dim(data[2](is.na(data[2])))
dim(c(1,2,3))
length(data[is.na(data)])
lendth(data)
length(data)
length(data[2])
data[2]
length(data[2])
length(dataNoNA)
nrow(data)
nrow(dataNoNA)
nrow(data) - nrow(dataNoNA)
length(data[is.na(data)])
meanPerInterval
dataImputed <- data
dataImputed[is.na(dataImputed)] <- meanPerInterval[data[is.na(data)][1]]
a <- c(1,2,3)
a[c(1,1,2,1)]
data[is.na(data)]
data[is.na(data[2])]
data[is.na(data)]
data[is.na(data)][1]
data[is.na(data)][2]
data[2]
data$steps
data[is.na(data$steps)]
is.na(data$steps)
data[is.na(data$steps), ]
data[is.na(data$steps), 3]
data[is.na(data$steps), ]
dataImputed[is.na(dataImputed$steps)] <- meanPerInterval[data[is.na(data$steps), 3]]
data[is.na(data$steps), 3]
meanPerInterval[data[is.na(data$steps), 3], ]
meanPerInterval
meanPerInterval[meanPerInterval$interval = data[is.na(data$steps), 3], ]
meanPerInterval[meanPerInterval$interval == data[is.na(data$steps), 3], ]
meanPerInterval$interval
meanPerInterval[1]
meanPerInterval[meanPerInterval[1] == data[is.na(data$steps), 3], ]
meanPerInterval[1] == data[is.na(data.steps), 3]
meanPerInterval[1] == data[is.na(data$steps), 3]
data[is.na(data$steps), 3]
meanPerInterval[meanPerInterval[1] == data[is.na(data$steps), 3], ]
data[c(1,1,2,2), ]
meanPerInterval[meanPerInterval[1] == 5]
meanPerInterval[meanPerInterval[1] == c(5,5)]
meanPerInterval[meanPerInterval[1] == c(5,5), ]
data.frame(meanPerInterval)
data.frame(meanPerInterval, c("interval","steps"))
names(meanPerInterval) <- c("interval","steps")
meanPerInterval
meanPerInterval[interval == c(5,5,10,10)]
meanPerInterval[meanPerInterval$interval == c(5,5,10,10)]
meanPerInterval[meanPerInterval$interval == c(5,5,10,10), ]
meanPerInterval[meanPerInterval$interval == c(5,10,5,10), ]
meanPerInterval[meanPerInterval$interval == c(5,10,5), ]
meanPerInterval[meanPerInterval$interval == c(5,10), ]
meanPerInterval[meanPerInterval$interval == c(5,5,10,10)]
meanPerInterval[meanPerInterval$interval == c(5,5,10,10), ]
merge(data, meanPerInterval, by="interval")
nrows(merge(data, meanPerInterval, by="interval"))
nrows
nrow
nrow(merge(data, meanPerInterval, by="interval"))
nrow(data)
merge(data, meanPerInterval, by="interval")$steps
merge(data, meanPerInterval, by="interval")[3]
merge(data, meanPerInterval, by="interval")[4]
dataImputed$steps[is.na(data$steps)] <- merge(data, meanPerInterval, by="interval")[is.na(data$steps), 4]
dataImputed
head(dataImputed)
head(data)
totalStepsImputed <- aggregate(dataImputed$steps, by=list(dataImputed$date), FUN=sum)
meanImputed <- mean(totalStepsImputed$steps)
totalStepsImputed
mean(totalStepsImputed[2])
mean(totalStepsImputed[1])
totalStepsImputed$steps
totalStepsImputed$x
totalStepsImputed <- aggregate(dataImputed$steps, by=list(dataImputed$date), FUN=sum)
names(totalStepsImputed) <- c("date", "steps")
meanImputed <- mean(totalStepsImputed$steps)
medianImputed <- median(totalStepsImputed$steps)
meanImputed
meanTotalStepsPerDay
stepsPerDay <- aggregate(dataNoNA$steps, by=list(dataNoNA$date), FUN=sum)[2]
meanTotalStepsPerDay <- mean(stepsPerDay$x)
medianTotalStepsPerDay <- median(stepsPerDay$x)
plot(totalStepsImputed$steps, geom="histogram")
qplot(totalStepsImputed$steps, geom="histogram")
weekday(dataImputed$date)
weekdays(dataImputed$date)
help weekdays
weekdays(as.Date(dataImputed$date))
weekdays(as.Date(dataImputed$date), abbrev=TRUE)
dataImputed$weekend <- ifelse(weekdays(as.Date(dataImputed$date), abbrev=TRUE) == "Sat" || weekdays(as.Date(dataImputed$date), abbrev=TRUE) == "Sun", "Weekend", "weekday")
dataImputed[1:20, ]
weekendAvg <- aggregate(dataImputed[dataImputed$weekend=="weekend"], by=list(dataImputed$interval), FUN=mean)
weekdayAvg <- aggregate(dataImputed[dataImputed$weekend=="weekday"], by=list(dataImputed$interval), FUN=mean)
dataImputed[dataImputed$weekend=="weekend"]
dataImputed[dataImputed$weekend=="weekend", ]
dataImputed$weekend
dataImputed$weekend == "weekend"
dataImputed$weekend == "weekday"
weekendAvg <- aggregate(dataImputed[dataImputed$weekend=="weekend", ], by=list(dataImputed$interval), FUN=mean)
weekdayAvg <- aggregate(dataImputed[dataImputed$weekend=="weekday", ], by=list(dataImputed$interval), FUN=mean)
dataImputed$date
as.Date(dataImputed$date)
weekdays(as.Date(dataImputed$date), abbrev=TRUE)
weekdays(as.Date(dataImputed$date), abbrev=TRUE) == "Sun"
dataImputed$day <- weekdays(as.Date(dataImputed$date))
head(dataImputed)
dataImputed$day <- weekdays(as.Date(dataImputed$date), abbr=TRUE)
head(dataImputed)
dataImputed[dataImputed$day == "Sun", ]
dataImputed[dataImputed$day == "Sat", ]
dataImputed[dataImputed$day == "Sat" || dataImputed$day == "Sun", ]
dataImputed[dataImputed$day == "Sat" | dataImputed$day == "Sun", ]
dataImputed$weekend <- ifelse(weekdays(as.Date(dataImputed$date), abbrev=TRUE) == "Sat" | weekdays(as.Date(dataImputed$date)) == "Sun", "weekend", "weekday")
head(dataImputed)
tail(dataImputed)
dataImputed
dataImputed$weekend <- ifelse(weekdays(as.Date(dataImputed$date), abbrev=TRUE) == "Sat" | weekdays(as.Date(dataImputed$date), abbrev=TRUE) == "Sun", "weekend", "weekday")
tail(dataImputed)
dataImputed
weekendAvg <- aggregate(dataImputed[dataImputed$weekend=="weekend", ], by=list(dataImputed$interval), FUN=mean)
weekdayAvg <- aggregate(dataImputed[dataImputed$weekend=="weekday", ], by=list(dataImputed$interval), FUN=mean)
View(weekdayAvg)
View(weekdayAvg)
rm(weekdayAvg)
rm(weekendAvg)
weekendAvg <- aggregate(dataImputed[dataImputed$weekend=="weekend", ], by=list(dataImputed$interval), FUN=mean)
dataImputed[dataImtputed$weekend=="weekend", ]
dataImputed[dataImputed$weekend=="weekend", ]
dataImputed$steps[dataImputed$weekend=="weekend", ]
dataImputed$steps
dataImputed$steps[1]
dataImputed$steps[c(1,2,3)]
dataImputed$steps[c(1,2,3), ]
dataImputed$steps[dataImputed$weekend=="weekend"]
weekendAvg <- aggregate(dataImputed$steps[dataImputed$weekend=="weekend"], by=list(dataImputed$interval), FUN=mean)
dataWeekend <- dataImputed[dataImputed$weekend=="weekend", ]
dataWeekday <- dataImputed[dataImputed$weekend=="weekday", ]
weekendAvg <- aggregate(dataWeekend$steps, by=list(dataWeekend$interval), FUN=mean)
weekdayAvg <- aggregate(dataWeekday$steps, by=list(dataWeekday$interval), FUN=mean)
plot.ts(weekendAvg$steps)
weekendAvg
plot.ts(weekendAvg)
plot.ts(weekendAvg[2])
plot.ts(weekdayAvg[2])
?layout
bycol
byCol
par(mfrow=c(2,1))
plot.ts(weekendAvg[2])
plot.ts(weekdayAvg[2])
par(mfrow=c(2,1))
plot.ts(weekendAvg[2], main="Weekend")
plot.ts(weekdayAvg[2], main="Weekday")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile="tmp.csv")
read.csv("tmp.csv")
tmp <- read.csv("tmp.csv")
length(tmp$VAL >= 1000000)
tmp$VAL >= 1000000
tmp$VAL[!is.na(tmp$VAL)]
length(tmp$VAL[!is.na(tmp$VAL)] > 1000000)
length(tmp$VAL[!is.na(tmp$VAL)] >= 1000000)
tmp$VAL[!is.na(tmp$VAL)]
tmp$VAL[!is.na(tmp$VAL)][tmp$VAL == 24]
tmp$VAL[tmp$VAL == 24]
t <- tmp$VAL[tmp$VAL == 24]
t[!is.na(t)]
length(t[!is.na(t)])
tmp$VAL[tmp$VAL == 24 & !is.na(tmp$VAL)]
tmp$VAL[tmp$VAL == 24 && !is.na(tmp$VAL)]
tmp$VAL[tmp$VAL == 24 & !is.na(tmp$VAL)]
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile="tmp.xslx")
install.packages("xslx")
install.packages("xlsx")
library('xlsx')
dat <- read.xlsx("tmp.xslx")[18:23, 7:15]
dat <- read.xlsx("tmp.xslx", 1)[18:23, 7:15]
dat <- read.xlsx("tmp.xslx", sheetIndex=1, header=TRUE)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", destfile="tmp.xlsx")
dat <- read.xlsx("tmp.xlsx", sheetIndex=1, header=TRUE)
dat <- read.xlsx("dat.xlsx", sheetIndex=1, header=TRUE)
dat <- read.xlsx("dat.xlsx", sheetIndex=1, header=TRUE)[18:23, 7:15]
sum(dat$Zip*dat$Ext,na.rm=T)
library(XML)
install.packages("XML")
library(XML)
doc <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternal=TRUE)
doc <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
doc <- xmlTreeParse("tmp.xml")
rootNode <- xmlRoot(doc)
rootNode
xpathSApply(rootNode, "//zipcode", xmlValue)
rootNode[1]
xpathSApply(doc, "//zipcode", xmlValue)
xpathSApply(rootNode, "//zipcode", xmlValue)
xpathApply(rootNode, "//zipcode")
xpathApply(rootNode, "//zipcode", FUN=xmlValue)
xmlValue
sapply(xpathApply(rootNode, "//zipcode"), FUN=xmlValue)
sapply(xpathApply(rootNode, "//zipcode"), FUN=xmlValue) == "21231"
sum(sapply(xpathApply(rootNode, "//zipcode"), FUN=xmlValue) == "21231")
install.packages("knitr")
library(knitr)
knit2html("PA1_template.Rmd")
